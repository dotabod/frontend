generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String    @unique
  type                 String
  provider             String
  providerAccountId    String    @unique
  refresh_token        String
  access_token         String
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  obtainment_timestamp DateTime? @db.Timestamptz(6)
  expires_in           Int?
  requires_refresh     Boolean?  @default(false)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([provider, providerAccountId, userId], map: "idx_accounts_on_provider_provideraccountid_userid")
  @@map("accounts")
}

model User {
  id                                String              @id @default(dbgenerated("gen_random_uuid()"))
  displayName                       String?             @unique(map: "users_name_key")
  email                             String?             @unique
  image                             String?
  createdAt                         DateTime            @default(now()) @map("created_at")
  updatedAt                         DateTime            @default(now()) @map("updated_at")
  mmr                               Int                 @default(0) @db.SmallInt
  steam32Id                         Int?
  followers                         Int?
  stream_delay                      Int?                @default(0) @db.SmallInt
  name                              String              @unique(map: "users_username_key") @default("")
  emailVerified                     DateTime?
  stream_online                     Boolean             @default(false)
  stream_start_date                 DateTime?           @db.Timestamp(6)
  beta_tester                       Boolean             @default(false)
  locale                            String              @default("en")
  kick                              BigInt?             @unique
  youtube                           String?             @unique
  proExpiration                     DateTime?           @map("pro_expiration")
  MessageDelivery                   MessageDelivery[]
  scheduledMessages                 ScheduledMessage[]
  Account                           Account?
  admin                             admin?
  approvedModerators                ApprovedModerator[] @relation("UserApprovedModerators")
  matches                           matches[]
  mods_mods_mod_user_idTousers      mods[]              @relation("mods_mod_user_idTousers")
  mods_mods_streamer_user_idTousers mods[]              @relation("mods_streamer_user_idTousers")
  notifications                     Notification[]
  settings                          Setting[]
  SteamAccount                      SteamAccount[]
  streams                           streams?
  subscription                      Subscription[]
  disableNotifications              DisableNotification[] @relation("UserDisableNotifications")

  @@index([followers(sort: Desc)], map: "idx_users_followers_desc")
  @@index([id], map: "idx_users_on_id")
  @@index([name], map: "idx_users_on_name")
  @@index([locale])
  @@index([stream_online])
  @@map("users")
}

model ApprovedModerator {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")
  moderatorChannelId Int
  user               User     @relation("UserApprovedModerators", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, moderatorChannelId])
  @@index([userId], map: "idx_approved_moderators_on_userid")
  @@index([moderatorChannelId], map: "idx_approved_moderators_on_moderatorChannelId")
  @@map("approved_moderators")
}

model Setting {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  key              String
  value            Json?
  userId           String
  disableReason    DisableReason? @map("disable_reason")
  autoDisabledAt   DateTime? @map("auto_disabled_at")
  autoDisabledBy   String?   @map("auto_disabled_by")
  disableMetadata  Json?     @map("disable_metadata")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
  @@index([userId], map: "idx_settings_on_userid")
  @@index([disableReason], map: "idx_settings_on_disable_reason")
  @@map("settings")
}

model SteamAccount {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  steam32Id        Int      @unique
  userId           String
  name             String?
  mmr              Int      @default(0) @db.SmallInt
  leaderboard_rank Int?     @db.SmallInt
  connectedUserIds String[]
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("steam_accounts")
}

model mods {
  id                                 BigInt   @id @default(autoincrement())
  temp_mod_name                      String?  @db.VarChar
  streamer_user_id                   String
  mod_user_id                        String?
  created_at                         DateTime @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime @default(now()) @db.Timestamptz(6)
  users_mods_mod_user_idTousers      User?    @relation("mods_mod_user_idTousers", fields: [mod_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_mods_streamer_user_idTousers User     @relation("mods_streamer_user_idTousers", fields: [streamer_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model streams {
  id                String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  userId            String    @id
  followers         Int?
  stream_delay      Int?      @default(0) @db.SmallInt
  stream_online     Boolean   @default(false)
  stream_start_date DateTime? @db.Timestamp(6)
  category_name     String?
  category_id       Int?
  title             String?
  users             User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model discord_accounts {
  id                BigInt   @default(autoincrement())
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  token_type        String   @db.VarChar
  access_token      String   @db.VarChar
  expires_in        BigInt
  refresh_token     String   @db.VarChar
  scope             String   @db.VarChar
  providerAccountId BigInt   @unique

  @@id([id, providerAccountId])
}

model admin {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String   @unique
  role      String   @default("admin")
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Subscription {
  id                   String              @id @default(dbgenerated("gen_random_uuid()"))
  userId               String
  stripeCustomerId     String?
  stripePriceId        String?
  stripeSubscriptionId String?             @unique
  tier                 SubscriptionTier    @default(FREE)
  status               SubscriptionStatus?
  transactionType      TransactionType
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean             @default(false)
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @map("updated_at")
  isGift               Boolean             @default(false)
  metadata             Json?
  giftDetails          GiftSubscription?
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([transactionType])
  @@index([isGift])
  @@map("subscriptions")
}

model GiftSubscription {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  subscriptionId String            @unique
  senderName     String            @default("Anonymous")
  giftMessage    String?
  giftType       String            @default("monthly")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @default(now()) @map("updated_at")
  giftQuantity   Int               @default(1)
  gifterId       String?
  subscription   Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  transactions   GiftTransaction[]
  notification   Notification?

  @@index([subscriptionId])
  @@map("gift_subscriptions")
}

model GiftTransaction {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  giftSubscriptionId String
  recipientId        String
  gifterId           String?
  giftType           String
  giftQuantity       Int
  amount             Int
  currency           String           @default("usd")
  stripeSessionId    String?
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  metadata           Json?
  giftSubscription   GiftSubscription @relation(fields: [giftSubscriptionId], references: [id], onDelete: Cascade)

  @@index([giftSubscriptionId])
  @@index([recipientId])
  @@index([gifterId])
  @@map("gift_transactions")
}

model Notification {
  id                 String            @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  type               String            @default("GIFT_SUBSCRIPTION")
  isRead             Boolean           @default(false)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @default(now()) @map("updated_at")
  giftSubscriptionId String?           @unique
  giftSubscription   GiftSubscription? @relation(fields: [giftSubscriptionId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@map("notifications")
}

model DisableNotification {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  userId       String    @map("user_id")
  settingKey   String    @map("setting_key")
  reason       DisableReason
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  acknowledged Boolean   @default(false)
  resolvedAt   DateTime? @map("resolved_at")
  autoResolved Boolean   @default(false) @map("auto_resolved")
  user         User      @relation("UserDisableNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([acknowledged])
  @@index([reason])
  @@index([settingKey])
  @@map("disable_notifications")
}

model WebhookEvent {
  id            String   @id @default(uuid())
  stripeEventId String   @unique
  eventType     String
  processedAt   DateTime
}

model ScheduledMessage {
  id            String            @id @default(dbgenerated("gen_random_uuid()"))
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime          @updatedAt @db.Timestamptz(6)
  message       String
  sendAt        DateTime          @db.Timestamptz(6)
  userId        String?
  isForAllUsers Boolean           @default(false)
  status        MessageStatus     @default(PENDING)
  deliveries    MessageDelivery[]
  user          User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sendAt])
  @@index([status])
  @@index([userId])
}

model MessageDelivery {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(6)
  scheduledMessageId String
  userId             String
  status             MessageStatus    @default(PENDING)
  deliveredAt        DateTime?        @db.Timestamptz(6)
  scheduledMessage   ScheduledMessage @relation(fields: [scheduledMessageId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([scheduledMessageId, userId])
  @@index([scheduledMessageId])
  @@index([userId])
  @@index([status])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model advanced_bets {
  id              Int       @id @default(autoincrement())
  match_id        String    @db.Uuid
  bet_type        String
  predictionid    String?
  title           String
  outcome_1       String
  outcome_2       String
  winning_outcome Int?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  data            Json?     @default("{}")
  matches         matches   @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([bet_type], map: "idx_advanced_bets_bet_type")
  @@index([match_id], map: "idx_advanced_bets_match_id")
  @@index([predictionid], map: "idx_advanced_bets_predictionid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model matches {
  id            String          @id(map: "bets_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  matchId       String
  predictionId  String?
  won           Boolean?
  myTeam        String
  userId        String
  lobby_type    Int?            @db.SmallInt
  steam32Id     BigInt?
  is_party      Boolean         @default(false)
  hero_slot     Int?            @db.SmallInt
  is_doubledown Boolean         @default(false)
  radiant_score Int?            @db.SmallInt
  dire_score    Int?            @db.SmallInt
  kda           Json?
  hero_name     String?
  game_mode     Int?            @db.SmallInt
  advanced_bets advanced_bets[]
  users         User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bets_userId_fkey")

  @@unique([matchId, userId], map: "bets_matchId_userId_key")
  @@index([updated_at], map: "bets_updated_at_idx")
  @@index([won, lobby_type, created_at, id], map: "idx_bets_on_won_lobbytype_createdat_id")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  PAUSED
  TRIALING
  UNPAID
}

enum SubscriptionTier {
  FREE
  PRO
}

enum TransactionType {
  RECURRING
  LIFETIME
}

enum MessageStatus {
  PENDING
  DELIVERED
  FAILED
  CANCELLED
}

enum DisableReason {
  TOKEN_REVOKED
  MANUAL_DISABLE
  STREAM_OFFLINE
  CHAT_PERMISSION_DENIED
  SUBSCRIPTION_INSUFFICIENT
  API_ERROR
  INVALID_TOKEN
  CACHE_CLEARED
  BOT_BANNED
  GAME_STATE
  RANK_RESTRICTION
  ACCOUNT_SHARING
}

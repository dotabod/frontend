generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String    @unique
  type                 String
  provider             String
  providerAccountId    String    @unique
  refresh_token        String
  access_token         String
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  obtainment_timestamp DateTime? @db.Timestamptz(6)
  expires_in           Int?
  requires_refresh     Boolean?  @default(false)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([provider, providerAccountId, userId], map: "idx_accounts_on_provider_provideraccountid_userid")
  @@map("accounts")
}

/// This model contains an index with non-default null sort order and requires additional setup for migrations. Visit https://pris.ly/d/default-index-null-ordering for more info.
model User {
  id                                String              @id @default(dbgenerated("gen_random_uuid()"))
  displayName                       String?             @unique(map: "users_name_key")
  email                             String?             @unique
  image                             String?
  createdAt                         DateTime            @default(now()) @map("created_at")
  updatedAt                         DateTime            @default(now()) @map("updated_at")
  mmr                               Int                 @default(0) @db.SmallInt
  steam32Id                         Int?
  followers                         Int?
  stream_delay                      Int?                @default(0) @db.SmallInt
  name                              String              @unique(map: "users_username_key") @default("")
  emailVerified                     DateTime?
  stream_online                     Boolean             @default(false)
  stream_start_date                 DateTime?           @db.Timestamp(6)
  beta_tester                       Boolean             @default(false)
  locale                            String              @default("en")
  kick                              BigInt?             @unique
  youtube                           String?             @unique
  Account                           Account?
  approvedModerators                ApprovedModerator[] @relation("UserApprovedModerators")
  Bet                               Bet[]
  mods_mods_mod_user_idTousers      mods[]              @relation("mods_mod_user_idTousers")
  mods_mods_streamer_user_idTousers mods[]              @relation("mods_streamer_user_idTousers")
  settings                          Setting[]
  SteamAccount                      SteamAccount[]
  streams                           streams?

  @@index([followers(sort: Desc)], map: "idx_users_followers_desc")
  @@index([id], map: "idx_users_on_id")
  @@index([name], map: "idx_users_on_name")
  @@index([locale])
  @@index([stream_online])
  @@map("users")
}

model ApprovedModerator {
  id                 String   @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")
  moderatorChannelId Int
  user               User     @relation("UserApprovedModerators", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, moderatorChannelId])
  @@index([userId], map: "idx_approved_moderators_on_userid")
  @@index([moderatorChannelId], map: "idx_approved_moderators_on_moderatorChannelId")
  @@map("approved_moderators")
}

model Setting {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  key       String
  value     Json?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([key, userId])
  @@index([userId], map: "idx_settings_on_userid")
  @@map("settings")
}

model SteamAccount {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  steam32Id        Int      @unique
  userId           String
  name             String?
  mmr              Int      @default(0) @db.SmallInt
  leaderboard_rank Int?     @db.SmallInt
  connectedUserIds String[]
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("steam_accounts")
}

model Bet {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  matchId       String
  predictionId  String?
  won           Boolean?
  myTeam        String
  userId        String
  lobby_type    Int?     @db.SmallInt
  steam32Id     BigInt?
  is_party      Boolean  @default(false)
  hero_slot     Int?     @db.SmallInt
  is_doubledown Boolean  @default(false)
  radiant_score Int?     @db.SmallInt
  dire_score    Int?     @db.SmallInt
  kda           Json?
  hero_name     String?
  game_mode     Int?     @db.SmallInt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([matchId, userId])
  @@index([won, lobby_type, createdAt, id], map: "idx_bets_on_won_lobbytype_createdat_id")
  @@index([updatedAt])
  @@map("bets")
}

model mods {
  id                                 BigInt   @id @default(autoincrement())
  temp_mod_name                      String?  @db.VarChar
  streamer_user_id                   String
  mod_user_id                        String?
  created_at                         DateTime @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime @default(now()) @db.Timestamptz(6)
  users_mods_mod_user_idTousers      User?    @relation("mods_mod_user_idTousers", fields: [mod_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_mods_streamer_user_idTousers User     @relation("mods_streamer_user_idTousers", fields: [streamer_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model streams {
  id                String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  userId            String    @id
  followers         Int?
  stream_delay      Int?      @default(0) @db.SmallInt
  stream_online     Boolean   @default(false)
  stream_start_date DateTime? @db.Timestamp(6)
  category_name     String?
  category_id       Int?
  title             String?
  users             User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model discord_accounts {
  id                BigInt   @default(autoincrement())
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  token_type        String   @db.VarChar
  access_token      String   @db.VarChar
  expires_in        BigInt
  refresh_token     String   @db.VarChar
  scope             String   @db.VarChar
  providerAccountId BigInt   @unique

  @@id([id, providerAccountId])
}
